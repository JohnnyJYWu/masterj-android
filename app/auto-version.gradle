def versionFile = new File(project.projectDir, 'app.conf')
def calculateVersionName = {
    versionFile.getText().split("=")[1].trim()
}
def calculateVersionCode = {
    def (versionMajor, versionMinor, versionPatch) = calculateVersionName().split("\\.").collect {
        Integer.parseInt(it)
    }
    versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + 99
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitCommitInfo = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%ai'
        standardOutput = stdout
    }
    return stdout.toString().split("\n")[0]
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy MM-dd HH:mm:ss')
    return formattedDate
}

def getBuildUser() {
    return System.getenv("BUILD_USER")
}

android {
    defaultConfig {
        versionName = calculateVersionName()
        versionCode = calculateVersionCode()
        buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
        buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
    }

    applicationVariants.all { variant ->
        resValue "string", "git_hash", "\"${getGitHash()}\""
        resValue "string", "git_branch", "\"${getGitBranch()}\""
        resValue "string", "git_commitInfo", "\"${getGitCommitInfo()}\""
        resValue "string", "build_time", "\"${getDate()}\""
        resValue "string", "build_user", "\"${getBuildUser()}\""
    }
}